// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: entries.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
    account_id,
    amount
) VALUES (
    $1, $2
)
RETURNING id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64
	Amount    int64
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntries = `-- name: DeleteEntries :exec
DELETE FROM entries WHERE id =$1
`

func (q *Queries) DeleteEntries(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntries, id)
	return err
}

const getEntriesByAccountId = `-- name: GetEntriesByAccountId :many
SELECT id, account_id, amount, created_at FROM entries 
WHERE account_id = $1 LIMIT $2
`

type GetEntriesByAccountIdParams struct {
	AccountID int64
	Limit     int32
}

func (q *Queries) GetEntriesByAccountId(ctx context.Context, arg GetEntriesByAccountIdParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntriesByAccountId, arg.AccountID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, amount, created_at FROM entries
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesByAccountId = `-- name: ListEntriesByAccountId :many
SELECT id, account_id, amount, created_at FROM entries 
WHERE account_id = $1
ORDER BY id
LIMIT $2 
OFFSET $3
`

type ListEntriesByAccountIdParams struct {
	AccountID int64
	Limit     int32
	Offset    int32
}

func (q *Queries) ListEntriesByAccountId(ctx context.Context, arg ListEntriesByAccountIdParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByAccountId, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntriesAmount = `-- name: UpdateEntriesAmount :one
UPDATE entries
set amount = $2
WHERE id = $1
RETURNING id, account_id, amount, created_at
`

type UpdateEntriesAmountParams struct {
	ID     int64
	Amount int64
}

func (q *Queries) UpdateEntriesAmount(ctx context.Context, arg UpdateEntriesAmountParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntriesAmount, arg.ID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
